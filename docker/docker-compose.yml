services:
  frontend:
    image: jimmy1211/flock-frontend:0.0.6
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=production
      - TZ=UTC
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 180s
      timeout: 20s
      retries: 3
      start_period: 30s
    depends_on:
      - api

  api:
    image: jimmy1211/flock-backend:0.0.6
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    ports:
      - 8000:8000
    environment:
      - DEBUG=true
      - SERVER_WORKER_AMOUNT=2
      - GUNICORN_TIMEOUT=120
      - TZ=UTC
      - POSTGRES_SERVER=db
      - QDRANT_URL=http://qdrant:6333
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - HOME=/app/data
    env_file:
      - .env
    volumes:
      - app-upload-data:/app
      - app-backend-model-cache:/app/model_cache
      - app-data:/app/data
      - ./entrypoint.sh:/app/docker-entrypoint-mount.sh
    entrypoint: [ 'sh', '-c', "cp /app/docker-entrypoint-mount.sh /app/docker-entrypoint.sh && sed -i 's/\r$$//' /app/docker-entrypoint.sh && chmod +x /app/docker-entrypoint.sh && /app/docker-entrypoint.sh" ]
    depends_on:
      - db
      - redis
      - qdrant
    restart: always
    user: root

  celery_worker:
    image: jimmy1211/flock-backend:0.0.6
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    environment:
      - MODE=worker
      - MIGRATION_ENABLED=true
      - CELERY_AUTO_SCALE=true
      - CELERY_MAX_WORKERS=4
      - CELERY_MIN_WORKERS=1
      - LOG_LEVEL=INFO
      - TZ=UTC
      - POSTGRES_SERVER=db
      - QDRANT_URL=http://qdrant:6333
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - HOME=/app/data
    env_file:
      - .env
    volumes:
      - app-upload-data:/app
      - app-backend-model-cache:/app/model_cache
      - app-data:/app/data
    depends_on:
      - redis
      - db
      - qdrant

  db:
    image: postgres:12
    restart: always

    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  qdrant:
    image: qdrant/qdrant
    restart: always

    volumes:
      - app-qdrant-data:/qdrant/storage
    environment:
      - QDRANT_SERVICE_API_KEY=${QDRANT_SERVICE_API_KEY?Variable not set}
    ports:
      - 6334:6334
      - 6333:6333

  redis:
    image: redis:alpine
    restart: always

    ports:
      - 6379:6379
    volumes:
      - app-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s




volumes:
  app-db-data:
  app-redis-data:
  app-qdrant-data:
  app-code-workspace:
  app-upload-data:
  app-backend-model-cache:
  app-data:
